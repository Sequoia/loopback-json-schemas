{
  "$schema" : "http://json-schema.org/draft-04/schema#",
  "id": "http://localhost:8090/loopback-model-definition.json",
  "title": "LoopBack 3.0 Model Definition",
  "description": "Defines a single loopback model in a json file. http://loopback.io/doc/en/lb3/Model-definition-JSON-file",
  "definitions": {
    "idInjection" : {
      "type" : "boolean",
      "description": "Whether to automatically add an id property to the model:\n\n* `true`: `id` property is added to the model automatically. This is the default.\n\n* `false`: `id` property is not added to the model\n\n\nhttp://loopback.io/doc/en/lb3/Model-definition-JSON-file#ModeldefinitionJSONfile-IDproperties",
      "default": true
    },
    "property" : {
      "description": "Defines a single property for a model.\r\rExample: \"age\" : { \"type\": \"number\" }\n",
      "type" : "object",
      "properties" : {
        "default" : {
          "description" : "Default value for the property. The type must match that specified by `type`."
        },
        "defaultFn": {
          "type": "string",
          "description": "A name of the function to call to set the default value for the property.\n\nNOTE: For discussion of providing additional options, see https://github.com/strongloop/loopback/issues/292"
        },
        "description" : {"$ref" : "http://localhost:8090/shared-refs.json#/definitions/descriptionProp"},
        "doc" : {
          "type": "string",
          "description": "**DEPRECATED** Use `description` instead"
        },
        "id" : {
          "type": ["boolean", "number"],
          "description": "Set the id property of the option to true to explicitly set this property as an id. Must be one of:\n\n* `true`: the property is an ID.\n\n* `false`: (or any value that converts to false): the property is not an ID (default).\n\n* Positive number, such as 1 or 2: the property is the index of a composite ID.\n\nSee http://loopback.io/doc/en/lb3/Model-definition-JSON-file#ModeldefinitionJSONfile-IDproperties\n",
          "default": false
        },
        "index" : { "$ref" : "#/definitions/propertyIndex" },
        "type" : { "$ref" : "http://localhost:8090/shared-refs.json#/definitions/loopbackDatatypeProperty"},
        "required" : {
          "type": "boolean",
          "description": "Whether a value for the property is required. If true, then adding or updating a model instance requires a value for the property.\n\nDefault is `false`.",
          "default": false
        },
        "length" : {
          "type": "integer",
          "description": "Length of string properties"
        },
        "mysql" : {
          "$ref" : "http://localhost:8090/mysql-connector-property-options.json"
        }
      },
      "required":["type"] 
    },
    "modelIndex" : {
      "descripton" : "Single index\n```\n\"field-name\":-1\n```",
      "type" : "number",
      "enum" : [-1, 1]
    },
    "modelIndexOptions" : {
      "type":"object",
      "properties": {
        "unique" :{
          "type" : "boolean"
        }
      }
    },
    "propertyIndex" : {
      "description" : "Add an index to a property. Examples:\n\n\"property_foo\": { \"type\": \"String\", \"index\": true },\n\n\n\n\"email\": { \"type\": \"String\", \"index\": {\"unique\": true} }",
      "anyOf": [
        {"type" : "boolean"},
        {
          "type" : "object",
          "properties" : {
            "unique" : { "type" : "boolean" }
          }
        }
      ]
    }
  },
  "properties": {
    "name" : {
      "type" : "string",
      "description": "Model name.\rBy convention, uppercase first letter (e.g. `Customer`)"
    },
    "description" : {
      "$ref" : "http://localhost:8090/shared-refs.json#/definitions/descriptionProp"
    },
    "plural" : {
      "type" : "string",
      "description": "Plural form of the model name. Defaults to plural of name property using standard English conventions."
    },
    "base" : {
      "type" : "string",
      "description": "Name of another model that this model extends. The model will \"inherit\" properties and methods of the base model."
    },
    "idInjection" : { "$ref" : "#/definitions/idInjection" },
    "http" : {
      "type" : "object",
      "description": "Used to override HTTP endpoint paths",
      "properties": {
        "path" : {
          "type" : "string",
          "description": "Customized HTTP path for REST endpoints of this model."
        }
      }
    },
    "hidden": {
      "type": "array",
      "description": "A hidden property is not sent in the JSON data in the application's HTTP response.  The property value is an array of strings, and each string in the array must match a property name defined for the model.",
      "items": {
        "description": "Key/name of property",
        "type": "string"
      }
    },
    "protected" : {
      "type": "array",
      "description": "A protected property is not sent in the JSON data in the application's HTTP response if the object is nested inside another object.\r\rhttp://loopback.io/doc/en/lb3/Model-definition-JSON-file#ModeldefinitionJSONfile-Protectedproperties",
      "items": {
        "type": "string"
      }
    },
    "strict" : {
      "type" : ["string","boolean"],
      "description": "Specifies whether the model accepts only predefined properties or not. \nDefaults to `false` unless the data source is backed by a relational database such as Oracle or MySQL.\n One of:\n\n* `true`: Only properties defined in the model are accepted. Use if you want to ensure the model accepts only predefined properties.\n\n* `false`: The model is an open model and accepts all properties, including ones not predefined in the model. This mode is useful to store free-form JSON data to a schema-less database such as MongoDB.\n\n* `\"validate\"`: The unknown properties will be reported as validation errors.\n\n* `\"throw\"`: Throws an exception if properties not defined for the model are used in an operation.",
      "enum": [true, false, "validate", "throw"]
    },
    "options" : {
      "type" : "object",
      "description": "",
      "properties" : {
        "idInjection" : { "$ref" : "#/definitions/idInjection" },
        "validateUpsert" : {
          "type": "boolean",
          "description": "By default, the `upsert()` method (alias `updateOrCreate()`) does not enforce valid model data. Instead, it logs validation errors to the console. This is not optimal, but necessary to preserve backwards compatibility with older 2.x versions.\n\n* `true` : ensure that `upsert()` returns an error when validation fails. The next major version of LoopBack will enable this option (set the property to true) by default.\n\n* `false` to prevent `upsert()` from calling any validators at all.\n\nBy default, `upsert()` calls all validators and reports any validation errors to the console log.\n\nhttp://apidocs.strongloop.com/loopback/#persistedmodel-upsert"
        }
      }
    },
    "properties" : {
      "type": "object",
      "description": "The properties key defines one or more properties.\rProperties may be defined by a type (\"string\"), an object, or `null|false` to exclude a property from a base model.",
      "additionalProperties": { 
        "anyOf": [
          { "$ref" : "#/definitions/property" },
          { "$ref" : "http://localhost:8090/shared-refs.json#/definitions/loopbackDatatypeProperty" },
          { 
            "title" : "excluded base property",
            "description" : "exclude properties from base model with null or false\r\rhttp://loopback.io/doc/en/lb3/Model-definition-JSON-file#ModeldefinitionJSONfile-Excludepropertiesfrombasemodel",
            "anyOf" : [
              {"type" : "boolean", "enum" : [false] },
              {"type" : "null"}
            ]
          }
        ]
      }
    },
    "relations" : {
      "type": "object",
      "description": "Definitions for relationships to other models.",
      "additionalProperties": {
        "type" : "object",
        "description": "Relationships.\r\rhttp://loopback.io/doc/en/lb3/Creating-model-relations",
        "properties": {
          "model": {
            "description": "Model name",
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : ["hasOne","hasMany","belongsTo","hasAndBelongsToMany", "embedsOne", "embedsMany"]
          },
          "keyThrough": {
            "description": "A hasManyThrough relation has a keyThrough property that indicates the foreign key property (field) name.  If not specified, it defaults to the toModelName with Id appended;\r\rhttp://loopback.io/doc/en/lb3/HasManyThrough-relations#HasManyThroughrelations-Definingtheforeignkeyproperty",
            "type" : "string"
          },
          "foreignKey": {
            "description": "Specify custom foreign key name (for *this* model) on related model",
            "type": "string"
          },
          "through" : {
            "type": "string",
            "description": "Through model name" 
          }
        },
        "dependencies": {
          "keyThrough" : {
            "required": ["through"]
          },
          "through" : {
            "properties" : {
              "type" : {
                "type": "string",
                "description": "`keyThrough`, `through` property(s) only valid with `hasMany` relationship type",
                "enum" : ["hasMany"]
              }
            }
          }
        },
        "required": ["model","type"]
      }
    },
    "acls" : {
      "type": "array",
      "description": "The value of the `acls` key is an array of objects that describes the access controls for the model. Example: \n\n{ \"permission\": \"ALLOW\", \"principalType\": \"ROLE\", \"principalId\": \"$everyone\", \"property\": \"myMethod\"}\n\nhttp://loopback.io/doc/en/lb3/Model-definition-JSON-file#ModeldefinitionJSONfile-ACLs",
      "items": {
        "type": "object",
        "description": "individual ACL rule",
        "properties": {
          "accessType": {
            "type" : "string",
            "description" : "The type of access to apply. One of:\n* READ\n* WRITE\n* EXECUTE\n* \\* (default)\n\n",
            "enum": ["READ","WRITE","EXECUTE","*"],
            "default": "READ"
          },
          "permission": {
            "type" : "string",
            "description" : "Type of permission granted. Required.\nOne of:\n\n* ALLOW - Explicitly grants access to the resource.\n\n* DENY - Explicitly denies access to the resource.\n",
            "enum" : ["ALLOW","DENY"],
            "default": "DENY"
          },
          "principalId": {
            "description" : "Principal identifier. Required.\nThe value must be one of:\n* A user ID (`String|number|any`)\n* One of the following predefined dynamic roles:\n  * `$everyone` - Everyone\n  * `$owner` - Owner of the object\n  * `$related` - Any user with a relationship to the object\n  * `$authenticated` - Authenticated user\n  * `$unauthenticated` - Unauthenticated user\n* A static role name\n",
            "anyOf" : [
              {
                "type" : "string",
                "description": "predefined dynamic roles",
                "enum" : ["$everyone", "$owner","$related","$authenticated","$unauthenticated"]
              },
              {
                "description": "A user ID (String|number|any) OR a static role name" 
              }
            ],
            "default": "$everyone"
          },
          "principalType": {
            "type" : "string",
            "description" : "Type of the principal (User, Role, Application)",
            "enum": ["APP","USER","ROLE"],
            "default": "ROLE"
          },
          "property": {
            "description" : "Specifies a property/method/relation on a given model. It further constrains where the ACL applies.\nCan be:\n\n* A string, for example: `\"create\"`\n\n* An array of strings, for example: `[\"create\", \"update\"]`\n",
            "anyOf" :[
              { "type": "string" },
              { "type": "array", "items" : [ {"type" : "string"} ] }
            ]
          }
        },
        "required" : ["permission", "principalId", "principalType"]
      }
    },
    "scopes" : {
      "type": "object",
      "description": "Scopes enable you to specify commonly-used queries that you can reference as method calls on a model.\nThe scopes key defines one or more scopes (named queries) for models. A scope maps a name to a predefined filter object to be used by the model's method\n\nhttp://loopback.io/doc/en/lb3/Model-definition-JSON-file#ModeldefinitionJSONfile-Scopes\n",
      "additionalProperties": {
        "$ref" : "http://localhost:8090/loopback-model-query-parameters.json#"
      }
    },
    "scope" : {
      "title" : "Default scope",
      "description": "If you wish for a scope to be applied across all queries to the model, you can use this property to set the default scope for the model itself.\r\r http://loopback.io/doc/en/lb3/Model-definition-JSON-file#ModeldefinitionJSONfile-Defaultscope",
      "$ref" : "http://localhost:8090/loopback-model-query-parameters.json#"
    },
    "mysql" : {
      "$ref" : "http://localhost:8090/mysql-connector-model-options.json"
    },
    "indexes" : {
      "description": "Declare indexes for a model \nExample:\n\n \"name_age_index\": { \"keys\": {\"name\": 1, \"age\": -1} }\n\n \"age_index\": {\"age\": -1} }\n\nhttp://loopback.io/doc/en/lb3/Model-definition-JSON-file#ModeldefinitionJSONfile-Indexes\n",
      "type" : "object",
      "additionalProperties": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "keys" : {
                "type" : "object",
                "description": "multiple `\"fieldname\" : 1|-1` indexes",
                "additionalProperties": {
                  "$ref" : "#/definitions/modelIndex"
                }
              },
              "options" : { "$ref" : "#/definitions/modelIndexOptions" }
            },
            "additionalProperties" : false
          },
          {
            "type" : "object",
            "properties" : {
              "options" : { "$ref" : "#/definitions/modelIndexOptions" }
            },
            "additionalProperties": {
              "$ref" : "#/definitions/modelIndex"
            }
          },
          {
            "type" : "object",
            "description" : "MySQL indexes\n\n http://dev.mysql.com/doc/refman/5.7/en/mysql-indexes.html\n\nhttp://loopback.io/doc/en/lb3/Model-definition-JSON-file#ModeldefinitionJSONfile-MySQLindexes",
            "properties": {
              "columns" : {
                "type" : "string",
                "description": "Comma separated list of column names"
              },
              "kind" : {
                "type" : "string",
                "description": "type of mysql index",
                "default": "UNIQUE",
                "enum" : ["PRIMARY KEY", "UNIQUE", "INDEX", "FULLTEXT"]
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "required": ["name"]
}
